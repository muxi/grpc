%YAML 1.2
--- |
  # This file has been automatically generated from a template file.
  # Please make modifications to `templates/gRPC-C++.podspec.template`
  # instead. This file can be regenerated from the template by running
  # `tools/buildgen/generate_projects.sh`.

  # gRPC C++ CocoaPods podspec
  #
  # Copyright 2017 gRPC authors.
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.

  <%!
  def grpc_private_files(libs):
    out = []
    for lib in libs:
      if lib.name in ("grpc", "gpr"):
        out += lib.get('headers', [])
        out += lib.get('src', [])
    return out

  def grpc_private_headers(libs):
    out = []
    for lib in libs:
      if lib.name in ("grpc", "gpr"):
        out += lib.get('headers', [])
    return out

  def grpc_public_headers(libs):
    out = []
    for lib in libs:
      if lib.name in ("grpc", "gpr"):
        out += lib.get('public_headers', [])
    return out

  def grpcpp_private_files(libs):
    out = []
    for lib in libs:
      if lib.name == "grpc++":
        out += lib.get('headers', [])
        out += lib.get('src', [])
    excl_files = grpc_private_files(libs)
    out = [file for file in out if file not in excl_files]
    # Since some C++ source files directly included private headers in C core, we include all the
    # C core headers in C++ Implementation subspec as well.
    out += [file for file in grpc_private_headers(libs) if not file.startswith("third_party/nanopb/")]
    return out

  def grpcpp_private_headers(libs):
    out = []
    for lib in libs:
      if lib.name == "grpc++":
        out += lib.get('headers', [])
    # Since some C++ source files directly included private headers in C core, we intentionally
    # keep the C core headers. But we should exclude nanopb headers.
    out = [file for file in out if not file.startswith("third_party/nanopb/")]
    return out

  def grpcpp_public_headers(libs):
    out = []
    for lib in libs:
      if lib.name == "grpc++":
        out += lib.get('public_headers', [])
    excl_files = grpc_public_headers(libs)
    out = [file for file in out if file not in excl_files]
    return out

  def ruby_multiline_list(files, indent):
    return (',\n' + indent*' ').join('\'%s\'' % f for f in files)
  %>
  Pod::Spec.new do |s|
    s.name     = 'gRPC-C++'
    # TODO (mxyan): use version that match gRPC version when pod is stabilized
    # version = '${settings.version}'
    version = '0.0.1'
    s.version  = version
    s.summary  = 'gRPC C++ library'
    s.homepage = 'https://grpc.io'
    s.license  = 'Apache License, Version 2.0'
    s.authors  = { 'The gRPC contributors' => 'grpc-packages@google.com' }

    grpc_version = '${settings.version}'

    s.source = {
      :git => 'https://github.com/grpc/grpc.git',
      :tag => "v#{grpc_version}",
    }

    s.ios.deployment_target = '7.0'
    s.osx.deployment_target = '10.9'
    s.requires_arc = false

    name = 'grpcpp'

    # When creating a dynamic framework, name it grpc++.framework instead of gRPC-C++.framework. This
    # lets users write their includes like `#include <grpc++/grpc.h>` as opposed to `#include
    # <gRPC-C++/grpc++.h>`.
    s.module_name = name

    # When creating a dynamic framework, copy the headers under `include/grpc++/` into the root of the
    # `Headers/` directory of the framework (i.e., not under `Headers/include/grpc++`).
    s.header_mappings_dir = 'include/grpc++'

    # The above has an undesired effect when creating a static library: It forces users to write
    # includes like `#include <gRPC-C++/grpc++.h>`. `s.header_dir` adds a path prefix to that, and
    # because Cocoapods lets omit the pod name when including headers of # static libraries, the
    # following lets users write `#include <grpc++/grpc++.h>`.
    s.header_dir = 'grpc++'

    # Use custom modulemap file
    # s.module_map = 'include/grpc/module.modulemap'

    s.pod_target_xcconfig = {
      'HEADER_SEARCH_PATHS' => '"$(inherited)" "$(PODS_TARGET_SRCROOT)/include"',
      'USER_HEADER_SEARCH_PATHS' => '"$(PODS_TARGET_SRCROOT)"',
      'GCC_PREPROCESSOR_DEFINITIONS' => '"$(inherited)" "COCOAPODS=1" "PB_NO_PACKED_STRUCTS=1"',
      'CLANG_WARN_STRICT_PROTOTYPES' => 'NO',
      'CLANG_WARN_DOCUMENTATION_COMMENTS' => 'NO',

      # If we don't set these two settings, `include/grpc/support/time.h` and
      # `src/core/lib/support/string.h` shadow the system `<time.h>` and `<string.h>`, breaking the
      # build.
      'USE_HEADERMAP' => 'NO',
      'ALWAYS_SEARCH_USER_PATHS' => 'NO',
    }

    s.libraries = 'c++'

    s.subspec 'Interface' do |ss|
      ss.header_mappings_dir = 'include/grpc++'

      ss.source_files = ${ruby_multiline_list(grpcpp_public_headers(libs), 22)}
    end

    s.subspec 'Implementation' do |ss|
      ss.header_mappings_dir = '.'
      ss.dependency "#{s.name}/Interface", version
      ss.dependency 'gRPC-Core', grpc_version
      ss.dependency 'nanopb', '~> 0.3'

      ss.source_files = ${ruby_multiline_list(grpcpp_private_files(libs), 22)}

      ss.private_header_files = ${ruby_multiline_list(grpcpp_private_headers(libs), 30)}
    end

    s.prepare_command = <<-END_OF_COMMAND
      find src/cpp/ -type f -exec sed -E -i '.back' 's;#include "third_party/nanopb/(.*)";#include <nanopb/\\1>;g' {} \\\;
      find src/cpp/ -name "*.back" -type f -delete
      find src/core/ -regex ".*\.h" -type f -exec sed -E -i '.back' 's;#include "third_party/nanopb/(.*)";#include <nanopb/\\1>;g' {} \\\;
      find src/core/ -name "*.back" -type f -delete
    END_OF_COMMAND
  end
