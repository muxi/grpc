// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rls.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_rls_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_rls_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_rls_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_rls_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rls_2eproto;
namespace google {
namespace lookup {
namespace v1alpha1 {
class RouteLookupRequest;
class RouteLookupRequestDefaultTypeInternal;
extern RouteLookupRequestDefaultTypeInternal _RouteLookupRequest_default_instance_;
class RouteLookupRequest_KeyMapEntry_DoNotUse;
class RouteLookupRequest_KeyMapEntry_DoNotUseDefaultTypeInternal;
extern RouteLookupRequest_KeyMapEntry_DoNotUseDefaultTypeInternal _RouteLookupRequest_KeyMapEntry_DoNotUse_default_instance_;
class RouteLookupResponse;
class RouteLookupResponseDefaultTypeInternal;
extern RouteLookupResponseDefaultTypeInternal _RouteLookupResponse_default_instance_;
}  // namespace v1alpha1
}  // namespace lookup
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::lookup::v1alpha1::RouteLookupRequest* Arena::CreateMaybeMessage<::google::lookup::v1alpha1::RouteLookupRequest>(Arena*);
template<> ::google::lookup::v1alpha1::RouteLookupRequest_KeyMapEntry_DoNotUse* Arena::CreateMaybeMessage<::google::lookup::v1alpha1::RouteLookupRequest_KeyMapEntry_DoNotUse>(Arena*);
template<> ::google::lookup::v1alpha1::RouteLookupResponse* Arena::CreateMaybeMessage<::google::lookup::v1alpha1::RouteLookupResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace lookup {
namespace v1alpha1 {

// ===================================================================

class RouteLookupRequest_KeyMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RouteLookupRequest_KeyMapEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RouteLookupRequest_KeyMapEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  RouteLookupRequest_KeyMapEntry_DoNotUse();
  RouteLookupRequest_KeyMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const RouteLookupRequest_KeyMapEntry_DoNotUse& other);
  static const RouteLookupRequest_KeyMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const RouteLookupRequest_KeyMapEntry_DoNotUse*>(&_RouteLookupRequest_KeyMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.lookup.v1alpha1.RouteLookupRequest.KeyMapEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.lookup.v1alpha1.RouteLookupRequest.KeyMapEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rls_2eproto);
    return ::descriptor_table_rls_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class RouteLookupRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.lookup.v1alpha1.RouteLookupRequest) */ {
 public:
  RouteLookupRequest();
  virtual ~RouteLookupRequest();

  RouteLookupRequest(const RouteLookupRequest& from);
  RouteLookupRequest(RouteLookupRequest&& from) noexcept
    : RouteLookupRequest() {
    *this = ::std::move(from);
  }

  inline RouteLookupRequest& operator=(const RouteLookupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteLookupRequest& operator=(RouteLookupRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RouteLookupRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RouteLookupRequest* internal_default_instance() {
    return reinterpret_cast<const RouteLookupRequest*>(
               &_RouteLookupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(RouteLookupRequest* other);
  friend void swap(RouteLookupRequest& a, RouteLookupRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RouteLookupRequest* New() const final {
    return CreateMaybeMessage<RouteLookupRequest>(nullptr);
  }

  RouteLookupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RouteLookupRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RouteLookupRequest& from);
  void MergeFrom(const RouteLookupRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteLookupRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.lookup.v1alpha1.RouteLookupRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rls_2eproto);
    return ::descriptor_table_rls_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> key_map = 4;
  int key_map_size() const;
  void clear_key_map();
  static const int kKeyMapFieldNumber = 4;
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      key_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_key_map();

  // string server = 1;
  void clear_server();
  static const int kServerFieldNumber = 1;
  const std::string& server() const;
  void set_server(const std::string& value);
  void set_server(std::string&& value);
  void set_server(const char* value);
  void set_server(const char* value, size_t size);
  std::string* mutable_server();
  std::string* release_server();
  void set_allocated_server(std::string* server);

  // string path = 2;
  void clear_path();
  static const int kPathFieldNumber = 2;
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);

  // string target_type = 3;
  void clear_target_type();
  static const int kTargetTypeFieldNumber = 3;
  const std::string& target_type() const;
  void set_target_type(const std::string& value);
  void set_target_type(std::string&& value);
  void set_target_type(const char* value);
  void set_target_type(const char* value, size_t size);
  std::string* mutable_target_type();
  std::string* release_target_type();
  void set_allocated_target_type(std::string* target_type);

  // @@protoc_insertion_point(class_scope:google.lookup.v1alpha1.RouteLookupRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      RouteLookupRequest_KeyMapEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > key_map_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rls_2eproto;
};
// -------------------------------------------------------------------

class RouteLookupResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.lookup.v1alpha1.RouteLookupResponse) */ {
 public:
  RouteLookupResponse();
  virtual ~RouteLookupResponse();

  RouteLookupResponse(const RouteLookupResponse& from);
  RouteLookupResponse(RouteLookupResponse&& from) noexcept
    : RouteLookupResponse() {
    *this = ::std::move(from);
  }

  inline RouteLookupResponse& operator=(const RouteLookupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteLookupResponse& operator=(RouteLookupResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RouteLookupResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RouteLookupResponse* internal_default_instance() {
    return reinterpret_cast<const RouteLookupResponse*>(
               &_RouteLookupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(RouteLookupResponse* other);
  friend void swap(RouteLookupResponse& a, RouteLookupResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RouteLookupResponse* New() const final {
    return CreateMaybeMessage<RouteLookupResponse>(nullptr);
  }

  RouteLookupResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RouteLookupResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RouteLookupResponse& from);
  void MergeFrom(const RouteLookupResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteLookupResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.lookup.v1alpha1.RouteLookupResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rls_2eproto);
    return ::descriptor_table_rls_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string target = 1;
  void clear_target();
  static const int kTargetFieldNumber = 1;
  const std::string& target() const;
  void set_target(const std::string& value);
  void set_target(std::string&& value);
  void set_target(const char* value);
  void set_target(const char* value, size_t size);
  std::string* mutable_target();
  std::string* release_target();
  void set_allocated_target(std::string* target);

  // string header_data = 2;
  void clear_header_data();
  static const int kHeaderDataFieldNumber = 2;
  const std::string& header_data() const;
  void set_header_data(const std::string& value);
  void set_header_data(std::string&& value);
  void set_header_data(const char* value);
  void set_header_data(const char* value, size_t size);
  std::string* mutable_header_data();
  std::string* release_header_data();
  void set_allocated_header_data(std::string* header_data);

  // @@protoc_insertion_point(class_scope:google.lookup.v1alpha1.RouteLookupResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr header_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rls_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// RouteLookupRequest

// string server = 1;
inline void RouteLookupRequest::clear_server() {
  server_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RouteLookupRequest::server() const {
  // @@protoc_insertion_point(field_get:google.lookup.v1alpha1.RouteLookupRequest.server)
  return server_.GetNoArena();
}
inline void RouteLookupRequest::set_server(const std::string& value) {
  
  server_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.lookup.v1alpha1.RouteLookupRequest.server)
}
inline void RouteLookupRequest::set_server(std::string&& value) {
  
  server_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.lookup.v1alpha1.RouteLookupRequest.server)
}
inline void RouteLookupRequest::set_server(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  server_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.lookup.v1alpha1.RouteLookupRequest.server)
}
inline void RouteLookupRequest::set_server(const char* value, size_t size) {
  
  server_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.lookup.v1alpha1.RouteLookupRequest.server)
}
inline std::string* RouteLookupRequest::mutable_server() {
  
  // @@protoc_insertion_point(field_mutable:google.lookup.v1alpha1.RouteLookupRequest.server)
  return server_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RouteLookupRequest::release_server() {
  // @@protoc_insertion_point(field_release:google.lookup.v1alpha1.RouteLookupRequest.server)
  
  return server_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RouteLookupRequest::set_allocated_server(std::string* server) {
  if (server != nullptr) {
    
  } else {
    
  }
  server_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), server);
  // @@protoc_insertion_point(field_set_allocated:google.lookup.v1alpha1.RouteLookupRequest.server)
}

// string path = 2;
inline void RouteLookupRequest::clear_path() {
  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RouteLookupRequest::path() const {
  // @@protoc_insertion_point(field_get:google.lookup.v1alpha1.RouteLookupRequest.path)
  return path_.GetNoArena();
}
inline void RouteLookupRequest::set_path(const std::string& value) {
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.lookup.v1alpha1.RouteLookupRequest.path)
}
inline void RouteLookupRequest::set_path(std::string&& value) {
  
  path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.lookup.v1alpha1.RouteLookupRequest.path)
}
inline void RouteLookupRequest::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.lookup.v1alpha1.RouteLookupRequest.path)
}
inline void RouteLookupRequest::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.lookup.v1alpha1.RouteLookupRequest.path)
}
inline std::string* RouteLookupRequest::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:google.lookup.v1alpha1.RouteLookupRequest.path)
  return path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RouteLookupRequest::release_path() {
  // @@protoc_insertion_point(field_release:google.lookup.v1alpha1.RouteLookupRequest.path)
  
  return path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RouteLookupRequest::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:google.lookup.v1alpha1.RouteLookupRequest.path)
}

// string target_type = 3;
inline void RouteLookupRequest::clear_target_type() {
  target_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RouteLookupRequest::target_type() const {
  // @@protoc_insertion_point(field_get:google.lookup.v1alpha1.RouteLookupRequest.target_type)
  return target_type_.GetNoArena();
}
inline void RouteLookupRequest::set_target_type(const std::string& value) {
  
  target_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.lookup.v1alpha1.RouteLookupRequest.target_type)
}
inline void RouteLookupRequest::set_target_type(std::string&& value) {
  
  target_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.lookup.v1alpha1.RouteLookupRequest.target_type)
}
inline void RouteLookupRequest::set_target_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.lookup.v1alpha1.RouteLookupRequest.target_type)
}
inline void RouteLookupRequest::set_target_type(const char* value, size_t size) {
  
  target_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.lookup.v1alpha1.RouteLookupRequest.target_type)
}
inline std::string* RouteLookupRequest::mutable_target_type() {
  
  // @@protoc_insertion_point(field_mutable:google.lookup.v1alpha1.RouteLookupRequest.target_type)
  return target_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RouteLookupRequest::release_target_type() {
  // @@protoc_insertion_point(field_release:google.lookup.v1alpha1.RouteLookupRequest.target_type)
  
  return target_type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RouteLookupRequest::set_allocated_target_type(std::string* target_type) {
  if (target_type != nullptr) {
    
  } else {
    
  }
  target_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target_type);
  // @@protoc_insertion_point(field_set_allocated:google.lookup.v1alpha1.RouteLookupRequest.target_type)
}

// map<string, string> key_map = 4;
inline int RouteLookupRequest::key_map_size() const {
  return key_map_.size();
}
inline void RouteLookupRequest::clear_key_map() {
  key_map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
RouteLookupRequest::key_map() const {
  // @@protoc_insertion_point(field_map:google.lookup.v1alpha1.RouteLookupRequest.key_map)
  return key_map_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
RouteLookupRequest::mutable_key_map() {
  // @@protoc_insertion_point(field_mutable_map:google.lookup.v1alpha1.RouteLookupRequest.key_map)
  return key_map_.MutableMap();
}

// -------------------------------------------------------------------

// RouteLookupResponse

// string target = 1;
inline void RouteLookupResponse::clear_target() {
  target_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RouteLookupResponse::target() const {
  // @@protoc_insertion_point(field_get:google.lookup.v1alpha1.RouteLookupResponse.target)
  return target_.GetNoArena();
}
inline void RouteLookupResponse::set_target(const std::string& value) {
  
  target_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.lookup.v1alpha1.RouteLookupResponse.target)
}
inline void RouteLookupResponse::set_target(std::string&& value) {
  
  target_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.lookup.v1alpha1.RouteLookupResponse.target)
}
inline void RouteLookupResponse::set_target(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.lookup.v1alpha1.RouteLookupResponse.target)
}
inline void RouteLookupResponse::set_target(const char* value, size_t size) {
  
  target_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.lookup.v1alpha1.RouteLookupResponse.target)
}
inline std::string* RouteLookupResponse::mutable_target() {
  
  // @@protoc_insertion_point(field_mutable:google.lookup.v1alpha1.RouteLookupResponse.target)
  return target_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RouteLookupResponse::release_target() {
  // @@protoc_insertion_point(field_release:google.lookup.v1alpha1.RouteLookupResponse.target)
  
  return target_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RouteLookupResponse::set_allocated_target(std::string* target) {
  if (target != nullptr) {
    
  } else {
    
  }
  target_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target);
  // @@protoc_insertion_point(field_set_allocated:google.lookup.v1alpha1.RouteLookupResponse.target)
}

// string header_data = 2;
inline void RouteLookupResponse::clear_header_data() {
  header_data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RouteLookupResponse::header_data() const {
  // @@protoc_insertion_point(field_get:google.lookup.v1alpha1.RouteLookupResponse.header_data)
  return header_data_.GetNoArena();
}
inline void RouteLookupResponse::set_header_data(const std::string& value) {
  
  header_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.lookup.v1alpha1.RouteLookupResponse.header_data)
}
inline void RouteLookupResponse::set_header_data(std::string&& value) {
  
  header_data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.lookup.v1alpha1.RouteLookupResponse.header_data)
}
inline void RouteLookupResponse::set_header_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  header_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.lookup.v1alpha1.RouteLookupResponse.header_data)
}
inline void RouteLookupResponse::set_header_data(const char* value, size_t size) {
  
  header_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.lookup.v1alpha1.RouteLookupResponse.header_data)
}
inline std::string* RouteLookupResponse::mutable_header_data() {
  
  // @@protoc_insertion_point(field_mutable:google.lookup.v1alpha1.RouteLookupResponse.header_data)
  return header_data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RouteLookupResponse::release_header_data() {
  // @@protoc_insertion_point(field_release:google.lookup.v1alpha1.RouteLookupResponse.header_data)
  
  return header_data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RouteLookupResponse::set_allocated_header_data(std::string* header_data) {
  if (header_data != nullptr) {
    
  } else {
    
  }
  header_data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), header_data);
  // @@protoc_insertion_point(field_set_allocated:google.lookup.v1alpha1.RouteLookupResponse.header_data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace lookup
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_rls_2eproto
